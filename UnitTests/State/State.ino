#include <stddef.h>

uint8_t POD = 1;
uint8_t state[] = {0, 0, 0};
uint8_t temp_state[] = {0, 0, 0};
uint8_t seq_group[] = {0, 0, 0, 0, 0};
uint8_t first[][1] = {{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}};
uint8_t second[][2] = {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}, {1, 9}, {1, 10}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8}, {2, 9}, {2, 10}, {3, 4}, {3, 5}, {3, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 5}, {4, 6}, {4, 7}, {4, 8}, {4, 9}, {4, 10}, {5, 6}, {5, 7}, {5, 8}, {5, 9}, {5, 10}, {6, 7}, {6, 8}, {6, 9}, {6, 10}, {7, 8}, {7, 9}, {7, 10}, {8, 9}, {8, 10}, {9, 10}};
uint8_t third[][3] = {{1, 2, 3}, {1, 2, 4}, {1, 2, 5}, {1, 2, 6}, {1, 2, 7}, {1, 2, 8}, {1, 2, 9}, {1, 2, 10}, {1, 3, 4}, {1, 3, 5}, {1, 3, 6}, {1, 3, 7}, {1, 3, 8}, {1, 3, 9}, {1, 3, 10}, {1, 4, 5}, {1, 4, 6}, {1, 4, 7}, {1, 4, 8}, {1, 4, 9}, {1, 4, 10}, {1, 5, 6}, {1, 5, 7}, {1, 5, 8}, {1, 5, 9}, {1, 5, 10}, {1, 6, 7}, {1, 6, 8}, {1, 6, 9}, {1, 6, 10}, {1, 7, 8}, {1, 7, 9}, {1, 7, 10}, {1, 8, 9}, {1, 8, 10}, {1, 9, 10}, {2, 3, 4}, {2, 3, 5}, {2, 3, 6}, {2, 3, 7}, {2, 3, 8}, {2, 3, 9}, {2, 3, 10}, {2, 4, 5}, {2, 4, 6}, {2, 4, 7}, {2, 4, 8}, {2, 4, 9}, {2, 4, 10}, {2, 5, 6}, {2, 5, 7}, {2, 5, 8}, {2, 5, 9}, {2, 5, 10}, {2, 6, 7}, {2, 6, 8}, {2, 6, 9}, {2, 6, 10}, {2, 7, 8}, {2, 7, 9}, {2, 7, 10}, {2, 8, 9}, {2, 8, 10}, {2, 9, 10}, {3, 4, 5}, {3, 4, 6}, {3, 4, 7}, {3, 4, 8}, {3, 4, 9}, {3, 4, 10}, {3, 5, 6}, {3, 5, 7}, {3, 5, 8}, {3, 5, 9}, {3, 5, 10}, {3, 6, 7}, {3, 6, 8}, {3, 6, 9}, {3, 6, 10}, {3, 7, 8}, {3, 7, 9}, {3, 7, 10}, {3, 8, 9}, {3, 8, 10}, {3, 9, 10}, {4, 5, 6}, {4, 5, 7}, {4, 5, 8}, {4, 5, 9}, {4, 5, 10}, {4, 6, 7}, {4, 6, 8}, {4, 6, 9}, {4, 6, 10}, {4, 7, 8}, {4, 7, 9}, {4, 7, 10}, {4, 8, 9}, {4, 8, 10}, {4, 9, 10}, {5, 6, 7}, {5, 6, 8}, {5, 6, 9}, {5, 6, 10}, {5, 7, 8}, {5, 7, 9}, {5, 7, 10}, {5, 8, 9}, {5, 8, 10}, {5, 9, 10}, {6, 7, 8}, {6, 7, 9}, {6, 7, 10}, {6, 8, 9}, {6, 8, 10}, {6, 9, 10}, {7, 8, 9}, {7, 8, 10}, {7, 9, 10}, {8, 9, 10}};
uint8_t fourth[][4] = {{1, 2, 3, 4}, {1, 2, 3, 5}, {1, 2, 3, 6}, {1, 2, 3, 7}, {1, 2, 3, 8}, {1, 2, 3, 9}, {1, 2, 3, 10}, {1, 2, 4, 5}, {1, 2, 4, 6}, {1, 2, 4, 7}, {1, 2, 4, 8}, {1, 2, 4, 9}, {1, 2, 4, 10}, {1, 2, 5, 6}, {1, 2, 5, 7}, {1, 2, 5, 8}, {1, 2, 5, 9}, {1, 2, 5, 10}, {1, 2, 6, 7}, {1, 2, 6, 8}, {1, 2, 6, 9}, {1, 2, 6, 10}, {1, 2, 7, 8}, {1, 2, 7, 9}, {1, 2, 7, 10}, {1, 2, 8, 9}, {1, 2, 8, 10}, {1, 2, 9, 10}, {1, 3, 4, 5}, {1, 3, 4, 6}, {1, 3, 4, 7}, {1, 3, 4, 8}, {1, 3, 4, 9}, {1, 3, 4, 10}, {1, 3, 5, 6}, {1, 3, 5, 7}, {1, 3, 5, 8}, {1, 3, 5, 9}, {1, 3, 5, 10}, {1, 3, 6, 7}, {1, 3, 6, 8}, {1, 3, 6, 9}, {1, 3, 6, 10}, {1, 3, 7, 8}, {1, 3, 7, 9}, {1, 3, 7, 10}, {1, 3, 8, 9}, {1, 3, 8, 10}, {1, 3, 9, 10}, {1, 4, 5, 6}, {1, 4, 5, 7}, {1, 4, 5, 8}, {1, 4, 5, 9}, {1, 4, 5, 10}, {1, 4, 6, 7}, {1, 4, 6, 8}, {1, 4, 6, 9}, {1, 4, 6, 10}, {1, 4, 7, 8}, {1, 4, 7, 9}, {1, 4, 7, 10}, {1, 4, 8, 9}, {1, 4, 8, 10}, {1, 4, 9, 10}, {1, 5, 6, 7}, {1, 5, 6, 8}, {1, 5, 6, 9}, {1, 5, 6, 10}, {1, 5, 7, 8}, {1, 5, 7, 9}, {1, 5, 7, 10}, {1, 5, 8, 9}, {1, 5, 8, 10}, {1, 5, 9, 10}, {1, 6, 7, 8}, {1, 6, 7, 9}, {1, 6, 7, 10}, {1, 6, 8, 9}, {1, 6, 8, 10}, {1, 6, 9, 10}, {1, 7, 8, 9}, {1, 7, 8, 10}, {1, 7, 9, 10}, {1, 8, 9, 10}, {2, 3, 4, 5}, {2, 3, 4, 6}, {2, 3, 4, 7}, {2, 3, 4, 8}, {2, 3, 4, 9}, {2, 3, 4, 10}, {2, 3, 5, 6}, {2, 3, 5, 7}, {2, 3, 5, 8}, {2, 3, 5, 9}, {2, 3, 5, 10}, {2, 3, 6, 7}, {2, 3, 6, 8}, {2, 3, 6, 9}, {2, 3, 6, 10}, {2, 3, 7, 8}, {2, 3, 7, 9}, {2, 3, 7, 10}, {2, 3, 8, 9}, {2, 3, 8, 10}, {2, 3, 9, 10}, {2, 4, 5, 6}, {2, 4, 5, 7}, {2, 4, 5, 8}, {2, 4, 5, 9}, {2, 4, 5, 10}, {2, 4, 6, 7}, {2, 4, 6, 8}, {2, 4, 6, 9}, {2, 4, 6, 10}, {2, 4, 7, 8}, {2, 4, 7, 9}, {2, 4, 7, 10}, {2, 4, 8, 9}, {2, 4, 8, 10}, {2, 4, 9, 10}, {2, 5, 6, 7}, {2, 5, 6, 8}, {2, 5, 6, 9}, {2, 5, 6, 10}, {2, 5, 7, 8}, {2, 5, 7, 9}, {2, 5, 7, 10}, {2, 5, 8, 9}, {2, 5, 8, 10}, {2, 5, 9, 10}, {2, 6, 7, 8}, {2, 6, 7, 9}, {2, 6, 7, 10}, {2, 6, 8, 9}, {2, 6, 8, 10}, {2, 6, 9, 10}, {2, 7, 8, 9}, {2, 7, 8, 10}, {2, 7, 9, 10}, {2, 8, 9, 10}, {3, 4, 5, 6}, {3, 4, 5, 7}, {3, 4, 5, 8}, {3, 4, 5, 9}, {3, 4, 5, 10}, {3, 4, 6, 7}, {3, 4, 6, 8}, {3, 4, 6, 9}, {3, 4, 6, 10}, {3, 4, 7, 8}, {3, 4, 7, 9}, {3, 4, 7, 10}, {3, 4, 8, 9}, {3, 4, 8, 10}, {3, 4, 9, 10}, {3, 5, 6, 7}, {3, 5, 6, 8}, {3, 5, 6, 9}, {3, 5, 6, 10}, {3, 5, 7, 8}, {3, 5, 7, 9}, {3, 5, 7, 10}, {3, 5, 8, 9}, {3, 5, 8, 10}, {3, 5, 9, 10}, {3, 6, 7, 8}, {3, 6, 7, 9}, {3, 6, 7, 10}, {3, 6, 8, 9}, {3, 6, 8, 10}, {3, 6, 9, 10}, {3, 7, 8, 9}, {3, 7, 8, 10}, {3, 7, 9, 10}, {3, 8, 9, 10}, {4, 5, 6, 7}, {4, 5, 6, 8}, {4, 5, 6, 9}, {4, 5, 6, 10}, {4, 5, 7, 8}, {4, 5, 7, 9}, {4, 5, 7, 10}, {4, 5, 8, 9}, {4, 5, 8, 10}, {4, 5, 9, 10}, {4, 6, 7, 8}, {4, 6, 7, 9}, {4, 6, 7, 10}, {4, 6, 8, 9}, {4, 6, 8, 10}, {4, 6, 9, 10}, {4, 7, 8, 9}, {4, 7, 8, 10}, {4, 7, 9, 10}, {4, 8, 9, 10}, {5, 6, 7, 8}, {5, 6, 7, 9}, {5, 6, 7, 10}, {5, 6, 8, 9}, {5, 6, 8, 10}, {5, 6, 9, 10}, {5, 7, 8, 9}, {5, 7, 8, 10}, {5, 7, 9, 10}, {5, 8, 9, 10}, {6, 7, 8, 9}, {6, 7, 8, 10}, {6, 7, 9, 10}, {6, 8, 9, 10}, {7, 8, 9, 10}};
uint8_t fifth[][5] = {{1, 2, 3, 4, 5}, {1, 2, 3, 4, 6}, {1, 2, 3, 4, 7}, {1, 2, 3, 4, 8}, {1, 2, 3, 4, 9}, {1, 2, 3, 4, 10}, {1, 2, 3, 5, 6}, {1, 2, 3, 5, 7}, {1, 2, 3, 5, 8}, {1, 2, 3, 5, 9}, {1, 2, 3, 5, 10}, {1, 2, 3, 6, 7}, {1, 2, 3, 6, 8}, {1, 2, 3, 6, 9}, {1, 2, 3, 6, 10}, {1, 2, 3, 7, 8}, {1, 2, 3, 7, 9}, {1, 2, 3, 7, 10}, {1, 2, 3, 8, 9}, {1, 2, 3, 8, 10}, {1, 2, 3, 9, 10}, {1, 2, 4, 5, 6}, {1, 2, 4, 5, 7}, {1, 2, 4, 5, 8}, {1, 2, 4, 5, 9}, {1, 2, 4, 5, 10}, {1, 2, 4, 6, 7}, {1, 2, 4, 6, 8}, {1, 2, 4, 6, 9}, {1, 2, 4, 6, 10}, {1, 2, 4, 7, 8}, {1, 2, 4, 7, 9}, {1, 2, 4, 7, 10}, {1, 2, 4, 8, 9}, {1, 2, 4, 8, 10}, {1, 2, 4, 9, 10}, {1, 2, 5, 6, 7}, {1, 2, 5, 6, 8}, {1, 2, 5, 6, 9}, {1, 2, 5, 6, 10}, {1, 2, 5, 7, 8}, {1, 2, 5, 7, 9}, {1, 2, 5, 7, 10}, {1, 2, 5, 8, 9}, {1, 2, 5, 8, 10}, {1, 2, 5, 9, 10}, {1, 2, 6, 7, 8}, {1, 2, 6, 7, 9}, {1, 2, 6, 7, 10}, {1, 2, 6, 8, 9}, {1, 2, 6, 8, 10}, {1, 2, 6, 9, 10}, {1, 2, 7, 8, 9}, {1, 2, 7, 8, 10}, {1, 2, 7, 9, 10}, {1, 2, 8, 9, 10}, {1, 3, 4, 5, 6}, {1, 3, 4, 5, 7}, {1, 3, 4, 5, 8}, {1, 3, 4, 5, 9}, {1, 3, 4, 5, 10}, {1, 3, 4, 6, 7}, {1, 3, 4, 6, 8}, {1, 3, 4, 6, 9}, {1, 3, 4, 6, 10}, {1, 3, 4, 7, 8}, {1, 3, 4, 7, 9}, {1, 3, 4, 7, 10}, {1, 3, 4, 8, 9}, {1, 3, 4, 8, 10}, {1, 3, 4, 9, 10}, {1, 3, 5, 6, 7}, {1, 3, 5, 6, 8}, {1, 3, 5, 6, 9}, {1, 3, 5, 6, 10}, {1, 3, 5, 7, 8}, {1, 3, 5, 7, 9}, {1, 3, 5, 7, 10}, {1, 3, 5, 8, 9}, {1, 3, 5, 8, 10}, {1, 3, 5, 9, 10}, {1, 3, 6, 7, 8}, {1, 3, 6, 7, 9}, {1, 3, 6, 7, 10}, {1, 3, 6, 8, 9}, {1, 3, 6, 8, 10}, {1, 3, 6, 9, 10}, {1, 3, 7, 8, 9}, {1, 3, 7, 8, 10}, {1, 3, 7, 9, 10}, {1, 3, 8, 9, 10}, {1, 4, 5, 6, 7}, {1, 4, 5, 6, 8}, {1, 4, 5, 6, 9}, {1, 4, 5, 6, 10}, {1, 4, 5, 7, 8}, {1, 4, 5, 7, 9}, {1, 4, 5, 7, 10}, {1, 4, 5, 8, 9}, {1, 4, 5, 8, 10}, {1, 4, 5, 9, 10}, {1, 4, 6, 7, 8}, {1, 4, 6, 7, 9}, {1, 4, 6, 7, 10}, {1, 4, 6, 8, 9}, {1, 4, 6, 8, 10}, {1, 4, 6, 9, 10}, {1, 4, 7, 8, 9}, {1, 4, 7, 8, 10}, {1, 4, 7, 9, 10}, {1, 4, 8, 9, 10}, {1, 5, 6, 7, 8}, {1, 5, 6, 7, 9}, {1, 5, 6, 7, 10}, {1, 5, 6, 8, 9}, {1, 5, 6, 8, 10}, {1, 5, 6, 9, 10}, {1, 5, 7, 8, 9}, {1, 5, 7, 8, 10}, {1, 5, 7, 9, 10}, {1, 5, 8, 9, 10}, {1, 6, 7, 8, 9}, {1, 6, 7, 8, 10}, {1, 6, 7, 9, 10}, {1, 6, 8, 9, 10}, {1, 7, 8, 9, 10}, {2, 3, 4, 5, 6}, {2, 3, 4, 5, 7}, {2, 3, 4, 5, 8}, {2, 3, 4, 5, 9}, {2, 3, 4, 5, 10}, {2, 3, 4, 6, 7}, {2, 3, 4, 6, 8}, {2, 3, 4, 6, 9}, {2, 3, 4, 6, 10}, {2, 3, 4, 7, 8}, {2, 3, 4, 7, 9}, {2, 3, 4, 7, 10}, {2, 3, 4, 8, 9}, {2, 3, 4, 8, 10}, {2, 3, 4, 9, 10}, {2, 3, 5, 6, 7}, {2, 3, 5, 6, 8}, {2, 3, 5, 6, 9}, {2, 3, 5, 6, 10}, {2, 3, 5, 7, 8}, {2, 3, 5, 7, 9}, {2, 3, 5, 7, 10}, {2, 3, 5, 8, 9}, {2, 3, 5, 8, 10}, {2, 3, 5, 9, 10}, {2, 3, 6, 7, 8}, {2, 3, 6, 7, 9}, {2, 3, 6, 7, 10}, {2, 3, 6, 8, 9}, {2, 3, 6, 8, 10}, {2, 3, 6, 9, 10}, {2, 3, 7, 8, 9}, {2, 3, 7, 8, 10}, {2, 3, 7, 9, 10}, {2, 3, 8, 9, 10}, {2, 4, 5, 6, 7}, {2, 4, 5, 6, 8}, {2, 4, 5, 6, 9}, {2, 4, 5, 6, 10}, {2, 4, 5, 7, 8}, {2, 4, 5, 7, 9}, {2, 4, 5, 7, 10}, {2, 4, 5, 8, 9}, {2, 4, 5, 8, 10}, {2, 4, 5, 9, 10}, {2, 4, 6, 7, 8}, {2, 4, 6, 7, 9}, {2, 4, 6, 7, 10}, {2, 4, 6, 8, 9}, {2, 4, 6, 8, 10}, {2, 4, 6, 9, 10}, {2, 4, 7, 8, 9}, {2, 4, 7, 8, 10}, {2, 4, 7, 9, 10}, {2, 4, 8, 9, 10}, {2, 5, 6, 7, 8}, {2, 5, 6, 7, 9}, {2, 5, 6, 7, 10}, {2, 5, 6, 8, 9}, {2, 5, 6, 8, 10}, {2, 5, 6, 9, 10}, {2, 5, 7, 8, 9}, {2, 5, 7, 8, 10}, {2, 5, 7, 9, 10}, {2, 5, 8, 9, 10}, {2, 6, 7, 8, 9}, {2, 6, 7, 8, 10}, {2, 6, 7, 9, 10}, {2, 6, 8, 9, 10}, {2, 7, 8, 9, 10}, {3, 4, 5, 6, 7}, {3, 4, 5, 6, 8}, {3, 4, 5, 6, 9}, {3, 4, 5, 6, 10}, {3, 4, 5, 7, 8}, {3, 4, 5, 7, 9}, {3, 4, 5, 7, 10}, {3, 4, 5, 8, 9}, {3, 4, 5, 8, 10}, {3, 4, 5, 9, 10}, {3, 4, 6, 7, 8}, {3, 4, 6, 7, 9}, {3, 4, 6, 7, 10}, {3, 4, 6, 8, 9}, {3, 4, 6, 8, 10}, {3, 4, 6, 9, 10}, {3, 4, 7, 8, 9}, {3, 4, 7, 8, 10}, {3, 4, 7, 9, 10}, {3, 4, 8, 9, 10}, {3, 5, 6, 7, 8}, {3, 5, 6, 7, 9}, {3, 5, 6, 7, 10}, {3, 5, 6, 8, 9}, {3, 5, 6, 8, 10}, {3, 5, 6, 9, 10}, {3, 5, 7, 8, 9}, {3, 5, 7, 8, 10}, {3, 5, 7, 9, 10}, {3, 5, 8, 9, 10}, {3, 6, 7, 8, 9}, {3, 6, 7, 8, 10}, {3, 6, 7, 9, 10}, {3, 6, 8, 9, 10}, {3, 7, 8, 9, 10}, {4, 5, 6, 7, 8}, {4, 5, 6, 7, 9}, {4, 5, 6, 7, 10}, {4, 5, 6, 8, 9}, {4, 5, 6, 8, 10}, {4, 5, 6, 9, 10}, {4, 5, 7, 8, 9}, {4, 5, 7, 8, 10}, {4, 5, 7, 9, 10}, {4, 5, 8, 9, 10}, {4, 6, 7, 8, 9}, {4, 6, 7, 8, 10}, {4, 6, 7, 9, 10}, {4, 6, 8, 9, 10}, {4, 7, 8, 9, 10}, {5, 6, 7, 8, 9}, {5, 6, 7, 8, 10}, {5, 6, 7, 9, 10}, {5, 6, 8, 9, 10}, {5, 7, 8, 9, 10}, {6, 7, 8, 9, 10}};
uint8_t sixth[][6] = {{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 7}, {1, 2, 3, 4, 5, 8}, {1, 2, 3, 4, 5, 9}, {1, 2, 3, 4, 5, 10}, {1, 2, 3, 4, 6, 7}, {1, 2, 3, 4, 6, 8}, {1, 2, 3, 4, 6, 9}, {1, 2, 3, 4, 6, 10}, {1, 2, 3, 4, 7, 8}, {1, 2, 3, 4, 7, 9}, {1, 2, 3, 4, 7, 10}, {1, 2, 3, 4, 8, 9}, {1, 2, 3, 4, 8, 10}, {1, 2, 3, 4, 9, 10}, {1, 2, 3, 5, 6, 7}, {1, 2, 3, 5, 6, 8}, {1, 2, 3, 5, 6, 9}, {1, 2, 3, 5, 6, 10}, {1, 2, 3, 5, 7, 8}, {1, 2, 3, 5, 7, 9}, {1, 2, 3, 5, 7, 10}, {1, 2, 3, 5, 8, 9}, {1, 2, 3, 5, 8, 10}, {1, 2, 3, 5, 9, 10}, {1, 2, 3, 6, 7, 8}, {1, 2, 3, 6, 7, 9}, {1, 2, 3, 6, 7, 10}, {1, 2, 3, 6, 8, 9}, {1, 2, 3, 6, 8, 10}, {1, 2, 3, 6, 9, 10}, {1, 2, 3, 7, 8, 9}, {1, 2, 3, 7, 8, 10}, {1, 2, 3, 7, 9, 10}, {1, 2, 3, 8, 9, 10}, {1, 2, 4, 5, 6, 7}, {1, 2, 4, 5, 6, 8}, {1, 2, 4, 5, 6, 9}, {1, 2, 4, 5, 6, 10}, {1, 2, 4, 5, 7, 8}, {1, 2, 4, 5, 7, 9}, {1, 2, 4, 5, 7, 10}, {1, 2, 4, 5, 8, 9}, {1, 2, 4, 5, 8, 10}, {1, 2, 4, 5, 9, 10}, {1, 2, 4, 6, 7, 8}, {1, 2, 4, 6, 7, 9}, {1, 2, 4, 6, 7, 10}, {1, 2, 4, 6, 8, 9}, {1, 2, 4, 6, 8, 10}, {1, 2, 4, 6, 9, 10}, {1, 2, 4, 7, 8, 9}, {1, 2, 4, 7, 8, 10}, {1, 2, 4, 7, 9, 10}, {1, 2, 4, 8, 9, 10}, {1, 2, 5, 6, 7, 8}, {1, 2, 5, 6, 7, 9}, {1, 2, 5, 6, 7, 10}, {1, 2, 5, 6, 8, 9}, {1, 2, 5, 6, 8, 10}, {1, 2, 5, 6, 9, 10}, {1, 2, 5, 7, 8, 9}, {1, 2, 5, 7, 8, 10}, {1, 2, 5, 7, 9, 10}, {1, 2, 5, 8, 9, 10}, {1, 2, 6, 7, 8, 9}, {1, 2, 6, 7, 8, 10}, {1, 2, 6, 7, 9, 10}, {1, 2, 6, 8, 9, 10}, {1, 2, 7, 8, 9, 10}, {1, 3, 4, 5, 6, 7}, {1, 3, 4, 5, 6, 8}, {1, 3, 4, 5, 6, 9}, {1, 3, 4, 5, 6, 10}, {1, 3, 4, 5, 7, 8}, {1, 3, 4, 5, 7, 9}, {1, 3, 4, 5, 7, 10}, {1, 3, 4, 5, 8, 9}, {1, 3, 4, 5, 8, 10}, {1, 3, 4, 5, 9, 10}, {1, 3, 4, 6, 7, 8}, {1, 3, 4, 6, 7, 9}, {1, 3, 4, 6, 7, 10}, {1, 3, 4, 6, 8, 9}, {1, 3, 4, 6, 8, 10}, {1, 3, 4, 6, 9, 10}, {1, 3, 4, 7, 8, 9}, {1, 3, 4, 7, 8, 10}, {1, 3, 4, 7, 9, 10}, {1, 3, 4, 8, 9, 10}, {1, 3, 5, 6, 7, 8}, {1, 3, 5, 6, 7, 9}, {1, 3, 5, 6, 7, 10}, {1, 3, 5, 6, 8, 9}, {1, 3, 5, 6, 8, 10}, {1, 3, 5, 6, 9, 10}, {1, 3, 5, 7, 8, 9}, {1, 3, 5, 7, 8, 10}, {1, 3, 5, 7, 9, 10}, {1, 3, 5, 8, 9, 10}, {1, 3, 6, 7, 8, 9}, {1, 3, 6, 7, 8, 10}, {1, 3, 6, 7, 9, 10}, {1, 3, 6, 8, 9, 10}, {1, 3, 7, 8, 9, 10}, {1, 4, 5, 6, 7, 8}, {1, 4, 5, 6, 7, 9}, {1, 4, 5, 6, 7, 10}, {1, 4, 5, 6, 8, 9}, {1, 4, 5, 6, 8, 10}, {1, 4, 5, 6, 9, 10}, {1, 4, 5, 7, 8, 9}, {1, 4, 5, 7, 8, 10}, {1, 4, 5, 7, 9, 10}, {1, 4, 5, 8, 9, 10}, {1, 4, 6, 7, 8, 9}, {1, 4, 6, 7, 8, 10}, {1, 4, 6, 7, 9, 10}, {1, 4, 6, 8, 9, 10}, {1, 4, 7, 8, 9, 10}, {1, 5, 6, 7, 8, 9}, {1, 5, 6, 7, 8, 10}, {1, 5, 6, 7, 9, 10}, {1, 5, 6, 8, 9, 10}, {1, 5, 7, 8, 9, 10}, {1, 6, 7, 8, 9, 10}, {2, 3, 4, 5, 6, 7}, {2, 3, 4, 5, 6, 8}, {2, 3, 4, 5, 6, 9}, {2, 3, 4, 5, 6, 10}, {2, 3, 4, 5, 7, 8}, {2, 3, 4, 5, 7, 9}, {2, 3, 4, 5, 7, 10}, {2, 3, 4, 5, 8, 9}, {2, 3, 4, 5, 8, 10}, {2, 3, 4, 5, 9, 10}, {2, 3, 4, 6, 7, 8}, {2, 3, 4, 6, 7, 9}, {2, 3, 4, 6, 7, 10}, {2, 3, 4, 6, 8, 9}, {2, 3, 4, 6, 8, 10}, {2, 3, 4, 6, 9, 10}, {2, 3, 4, 7, 8, 9}, {2, 3, 4, 7, 8, 10}, {2, 3, 4, 7, 9, 10}, {2, 3, 4, 8, 9, 10}, {2, 3, 5, 6, 7, 8}, {2, 3, 5, 6, 7, 9}, {2, 3, 5, 6, 7, 10}, {2, 3, 5, 6, 8, 9}, {2, 3, 5, 6, 8, 10}, {2, 3, 5, 6, 9, 10}, {2, 3, 5, 7, 8, 9}, {2, 3, 5, 7, 8, 10}, {2, 3, 5, 7, 9, 10}, {2, 3, 5, 8, 9, 10}, {2, 3, 6, 7, 8, 9}, {2, 3, 6, 7, 8, 10}, {2, 3, 6, 7, 9, 10}, {2, 3, 6, 8, 9, 10}, {2, 3, 7, 8, 9, 10}, {2, 4, 5, 6, 7, 8}, {2, 4, 5, 6, 7, 9}, {2, 4, 5, 6, 7, 10}, {2, 4, 5, 6, 8, 9}, {2, 4, 5, 6, 8, 10}, {2, 4, 5, 6, 9, 10}, {2, 4, 5, 7, 8, 9}, {2, 4, 5, 7, 8, 10}, {2, 4, 5, 7, 9, 10}, {2, 4, 5, 8, 9, 10}, {2, 4, 6, 7, 8, 9}, {2, 4, 6, 7, 8, 10}, {2, 4, 6, 7, 9, 10}, {2, 4, 6, 8, 9, 10}, {2, 4, 7, 8, 9, 10}, {2, 5, 6, 7, 8, 9}, {2, 5, 6, 7, 8, 10}, {2, 5, 6, 7, 9, 10}, {2, 5, 6, 8, 9, 10}, {2, 5, 7, 8, 9, 10}, {2, 6, 7, 8, 9, 10}, {3, 4, 5, 6, 7, 8}, {3, 4, 5, 6, 7, 9}, {3, 4, 5, 6, 7, 10}, {3, 4, 5, 6, 8, 9}, {3, 4, 5, 6, 8, 10}, {3, 4, 5, 6, 9, 10}, {3, 4, 5, 7, 8, 9}, {3, 4, 5, 7, 8, 10}, {3, 4, 5, 7, 9, 10}, {3, 4, 5, 8, 9, 10}, {3, 4, 6, 7, 8, 9}, {3, 4, 6, 7, 8, 10}, {3, 4, 6, 7, 9, 10}, {3, 4, 6, 8, 9, 10}, {3, 4, 7, 8, 9, 10}, {3, 5, 6, 7, 8, 9}, {3, 5, 6, 7, 8, 10}, {3, 5, 6, 7, 9, 10}, {3, 5, 6, 8, 9, 10}, {3, 5, 7, 8, 9, 10}, {3, 6, 7, 8, 9, 10}, {4, 5, 6, 7, 8, 9}, {4, 5, 6, 7, 8, 10}, {4, 5, 6, 7, 9, 10}, {4, 5, 6, 8, 9, 10}, {4, 5, 7, 8, 9, 10}, {4, 6, 7, 8, 9, 10}, {5, 6, 7, 8, 9, 10}};
uint8_t seventh[][7] = {{1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6, 8}, {1, 2, 3, 4, 5, 6, 9}, {1, 2, 3, 4, 5, 6, 10}, {1, 2, 3, 4, 5, 7, 8}, {1, 2, 3, 4, 5, 7, 9}, {1, 2, 3, 4, 5, 7, 10}, {1, 2, 3, 4, 5, 8, 9}, {1, 2, 3, 4, 5, 8, 10}, {1, 2, 3, 4, 5, 9, 10}, {1, 2, 3, 4, 6, 7, 8}, {1, 2, 3, 4, 6, 7, 9}, {1, 2, 3, 4, 6, 7, 10}, {1, 2, 3, 4, 6, 8, 9}, {1, 2, 3, 4, 6, 8, 10}, {1, 2, 3, 4, 6, 9, 10}, {1, 2, 3, 4, 7, 8, 9}, {1, 2, 3, 4, 7, 8, 10}, {1, 2, 3, 4, 7, 9, 10}, {1, 2, 3, 4, 8, 9, 10}, {1, 2, 3, 5, 6, 7, 8}, {1, 2, 3, 5, 6, 7, 9}, {1, 2, 3, 5, 6, 7, 10}, {1, 2, 3, 5, 6, 8, 9}, {1, 2, 3, 5, 6, 8, 10}, {1, 2, 3, 5, 6, 9, 10}, {1, 2, 3, 5, 7, 8, 9}, {1, 2, 3, 5, 7, 8, 10}, {1, 2, 3, 5, 7, 9, 10}, {1, 2, 3, 5, 8, 9, 10}, {1, 2, 3, 6, 7, 8, 9}, {1, 2, 3, 6, 7, 8, 10}, {1, 2, 3, 6, 7, 9, 10}, {1, 2, 3, 6, 8, 9, 10}, {1, 2, 3, 7, 8, 9, 10}, {1, 2, 4, 5, 6, 7, 8}, {1, 2, 4, 5, 6, 7, 9}, {1, 2, 4, 5, 6, 7, 10}, {1, 2, 4, 5, 6, 8, 9}, {1, 2, 4, 5, 6, 8, 10}, {1, 2, 4, 5, 6, 9, 10}, {1, 2, 4, 5, 7, 8, 9}, {1, 2, 4, 5, 7, 8, 10}, {1, 2, 4, 5, 7, 9, 10}, {1, 2, 4, 5, 8, 9, 10}, {1, 2, 4, 6, 7, 8, 9}, {1, 2, 4, 6, 7, 8, 10}, {1, 2, 4, 6, 7, 9, 10}, {1, 2, 4, 6, 8, 9, 10}, {1, 2, 4, 7, 8, 9, 10}, {1, 2, 5, 6, 7, 8, 9}, {1, 2, 5, 6, 7, 8, 10}, {1, 2, 5, 6, 7, 9, 10}, {1, 2, 5, 6, 8, 9, 10}, {1, 2, 5, 7, 8, 9, 10}, {1, 2, 6, 7, 8, 9, 10}, {1, 3, 4, 5, 6, 7, 8}, {1, 3, 4, 5, 6, 7, 9}, {1, 3, 4, 5, 6, 7, 10}, {1, 3, 4, 5, 6, 8, 9}, {1, 3, 4, 5, 6, 8, 10}, {1, 3, 4, 5, 6, 9, 10}, {1, 3, 4, 5, 7, 8, 9}, {1, 3, 4, 5, 7, 8, 10}, {1, 3, 4, 5, 7, 9, 10}, {1, 3, 4, 5, 8, 9, 10}, {1, 3, 4, 6, 7, 8, 9}, {1, 3, 4, 6, 7, 8, 10}, {1, 3, 4, 6, 7, 9, 10}, {1, 3, 4, 6, 8, 9, 10}, {1, 3, 4, 7, 8, 9, 10}, {1, 3, 5, 6, 7, 8, 9}, {1, 3, 5, 6, 7, 8, 10}, {1, 3, 5, 6, 7, 9, 10}, {1, 3, 5, 6, 8, 9, 10}, {1, 3, 5, 7, 8, 9, 10}, {1, 3, 6, 7, 8, 9, 10}, {1, 4, 5, 6, 7, 8, 9}, {1, 4, 5, 6, 7, 8, 10}, {1, 4, 5, 6, 7, 9, 10}, {1, 4, 5, 6, 8, 9, 10}, {1, 4, 5, 7, 8, 9, 10}, {1, 4, 6, 7, 8, 9, 10}, {1, 5, 6, 7, 8, 9, 10}, {2, 3, 4, 5, 6, 7, 8}, {2, 3, 4, 5, 6, 7, 9}, {2, 3, 4, 5, 6, 7, 10}, {2, 3, 4, 5, 6, 8, 9}, {2, 3, 4, 5, 6, 8, 10}, {2, 3, 4, 5, 6, 9, 10}, {2, 3, 4, 5, 7, 8, 9}, {2, 3, 4, 5, 7, 8, 10}, {2, 3, 4, 5, 7, 9, 10}, {2, 3, 4, 5, 8, 9, 10}, {2, 3, 4, 6, 7, 8, 9}, {2, 3, 4, 6, 7, 8, 10}, {2, 3, 4, 6, 7, 9, 10}, {2, 3, 4, 6, 8, 9, 10}, {2, 3, 4, 7, 8, 9, 10}, {2, 3, 5, 6, 7, 8, 9}, {2, 3, 5, 6, 7, 8, 10}, {2, 3, 5, 6, 7, 9, 10}, {2, 3, 5, 6, 8, 9, 10}, {2, 3, 5, 7, 8, 9, 10}, {2, 3, 6, 7, 8, 9, 10}, {2, 4, 5, 6, 7, 8, 9}, {2, 4, 5, 6, 7, 8, 10}, {2, 4, 5, 6, 7, 9, 10}, {2, 4, 5, 6, 8, 9, 10}, {2, 4, 5, 7, 8, 9, 10}, {2, 4, 6, 7, 8, 9, 10}, {2, 5, 6, 7, 8, 9, 10}, {3, 4, 5, 6, 7, 8, 9}, {3, 4, 5, 6, 7, 8, 10}, {3, 4, 5, 6, 7, 9, 10}, {3, 4, 5, 6, 8, 9, 10}, {3, 4, 5, 7, 8, 9, 10}, {3, 4, 6, 7, 8, 9, 10}, {3, 5, 6, 7, 8, 9, 10}, {4, 5, 6, 7, 8, 9, 10}};
uint8_t eighth[][8] = {{1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 9}, {1, 2, 3, 4, 5, 6, 7, 10}, {1, 2, 3, 4, 5, 6, 8, 9}, {1, 2, 3, 4, 5, 6, 8, 10}, {1, 2, 3, 4, 5, 6, 9, 10}, {1, 2, 3, 4, 5, 7, 8, 9}, {1, 2, 3, 4, 5, 7, 8, 10}, {1, 2, 3, 4, 5, 7, 9, 10}, {1, 2, 3, 4, 5, 8, 9, 10}, {1, 2, 3, 4, 6, 7, 8, 9}, {1, 2, 3, 4, 6, 7, 8, 10}, {1, 2, 3, 4, 6, 7, 9, 10}, {1, 2, 3, 4, 6, 8, 9, 10}, {1, 2, 3, 4, 7, 8, 9, 10}, {1, 2, 3, 5, 6, 7, 8, 9}, {1, 2, 3, 5, 6, 7, 8, 10}, {1, 2, 3, 5, 6, 7, 9, 10}, {1, 2, 3, 5, 6, 8, 9, 10}, {1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 3, 6, 7, 8, 9, 10}, {1, 2, 4, 5, 6, 7, 8, 9}, {1, 2, 4, 5, 6, 7, 8, 10}, {1, 2, 4, 5, 6, 7, 9, 10}, {1, 2, 4, 5, 6, 8, 9, 10}, {1, 2, 4, 5, 7, 8, 9, 10}, {1, 2, 4, 6, 7, 8, 9, 10}, {1, 2, 5, 6, 7, 8, 9, 10}, {1, 3, 4, 5, 6, 7, 8, 9}, {1, 3, 4, 5, 6, 7, 8, 10}, {1, 3, 4, 5, 6, 7, 9, 10}, {1, 3, 4, 5, 6, 8, 9, 10}, {1, 3, 4, 5, 7, 8, 9, 10}, {1, 3, 4, 6, 7, 8, 9, 10}, {1, 3, 5, 6, 7, 8, 9, 10}, {1, 4, 5, 6, 7, 8, 9, 10}, {2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 10}, {2, 3, 4, 5, 6, 7, 9, 10}, {2, 3, 4, 5, 6, 8, 9, 10}, {2, 3, 4, 5, 7, 8, 9, 10}, {2, 3, 4, 6, 7, 8, 9, 10}, {2, 3, 5, 6, 7, 8, 9, 10}, {2, 4, 5, 6, 7, 8, 9, 10}, {3, 4, 5, 6, 7, 8, 9, 10}};
uint8_t ninth[][9] = {{1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 10}, {1, 2, 3, 4, 5, 6, 7, 9, 10}, {1, 2, 3, 4, 5, 6, 8, 9, 10}, {1, 2, 3, 4, 5, 7, 8, 9, 10}, {1, 2, 3, 4, 6, 7, 8, 9, 10}, {1, 2, 3, 5, 6, 7, 8, 9, 10}, {1, 2, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 3, 4, 5, 6, 7, 8, 9, 10}};
uint8_t tenth[][10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

void setup() {
  Serial.begin(9600);
  change_state_test();
  //  occupied_test();
  //  all_occupied_test();
}

void loop() {
}

void print_expected_actual(uint8_t expected, uint8_t actual) {
  if (expected == actual) return;//Serial.println("Test passed");
  else {
    Serial.println("FAIL");
    Serial.print(expected, BIN);
    Serial.print(' ');
    Serial.println(actual, BIN);
  }
}

void change_state_test() {
  Serial.println("Change state test");
  reset_state();
  uint8_t *ptr;

  for (size_t i = 0; i < 10; i++) {
    for (size_t k = 0; k <= i; k++) {
      ptr = get_test_array(k);

      for (size_t j = 0; j < k + 1; j++) {
        change_state((ptr[j] << 4) | 1);
        if (ptr[j] > 8) temp_state[1] |= (1 << (ptr[j] - 9));
        else temp_state[2] |= (1 << (ptr[j] - 1));
        print_expected_actual_state(temp_state);

        change_state(ptr[j] << 4);
        if (ptr[j] > 8) temp_state[1] &= ~(1 << (ptr[j] - 9));
        else temp_state[2] &= ~(1 << (ptr[j] - 1));
        print_expected_actual_state(temp_state);

        reset_state();
        change_state((ptr[j] << 4) | 2);
        if (ptr[j] > 6) temp_state[0] |= (1 << (ptr[j] - 7));
        else temp_state[1] |= (1 << (ptr[j] + 1));
        print_expected_actual_state(temp_state);

        change_state(ptr[j] << 4);
        if (ptr[j] > 6) temp_state[0] &= ~(1 << (ptr[j] - 7));
        else temp_state[1] &= ~(1 << (ptr[j] + 1));
        print_expected_actual_state(temp_state);

        reset_state();
        change_state((ptr[j] << 4) | 3);
        if (ptr[j] > 8) temp_state[1] |= (1 << (ptr[j] - 9));
        else temp_state[2] |= (1 << (ptr[j] - 1));
        if (ptr[j] > 6) temp_state[0] |= (1 << (ptr[j] - 7));
        else temp_state[1] |= (1 << (ptr[j] + 1));
        print_expected_actual_state(temp_state);

        change_state(ptr[j] << 4);
        if (ptr[j] > 8) temp_state[1] &= ~(1 << (ptr[j] - 9));
        else temp_state[2] &= ~(1 << (ptr[j] - 1));
        if (ptr[j] > 6) temp_state[0] &= ~(1 << (ptr[j] - 7));
        else temp_state[1] &= ~(1 << (ptr[j] + 1));
        print_expected_actual_state(temp_state);
      }
    }
  }

  Serial.println("Change state test DONE");
}

void change_state(uint8_t data) {
  uint8_t entered_state = (data & 0x01);
  uint8_t ready_state = ((data & 0x02) >> 1);
  uint8_t pod_num = (data >> 4);
  uint8_t pos;
  if (pod_num > 6) {
    pos = pod_num - 7;
    state[0] ^= (-ready_state ^ state[0]) & (1 << pos); // set pos'th bit of state[0] to ready_state. This is magic.
  } else {
    pos = pod_num + 1;
    state[1] ^= (-ready_state ^ state[1])  & (1 << pos);
  }
  if (pod_num > 8) {
    pos = pod_num - 9;
    state[1] ^= (-entered_state ^ state[1]) & (1 << pos);
  } else {
    pos = pod_num - 1;
    state[2] ^= (-entered_state ^ state[2]) & (1 << pos);
  }
}

uint8_t check_set_seq(uint8_t data) { // Function tht master uses to determine which sequence to assign to a pod - returns 1 to 3
  uint8_t replacewith;
  uint8_t findval;
  if (data & 0x01) {
    findval = 0;
    replacewith = data >> 4;
  } else {
    findval = data >> 4;
    replacewith = 0;
  }
  for (size_t i = 1; i < 6; i++) {
    if (i < 5) {
      if ((seq_group[i - 1] & 0b00001111) == findval) {
        seq_group[i - 1] |= replacewith;
        if ((i % 3) == 1) return (i * 2 + 1) / 3;
        else return (i * 2 + 2) / 3;
      }
    }
    if ((seq_group[i - 1] >> 4) == findval) {
      seq_group[i - 1] |= replacewith << 4;
      if ((i % 3) == 0) return i * 2 / 3;
      else return (i * 2 + 1) / 3;
    }
  }
}

void set_seq(uint8_t pod_num, uint8_t pos) {
  uint8_t index = pos / 2;
  uint8_t the_half = pos % 2;
  if (the_half && (index == 4)) {
    seq_group[index] |= pod_num;
  }
}

void occupied_test() {
  Serial.println("Occupied test");
  reset_state();
}

void set_occupied(bool occ) {
  uint8_t set = 0;
  if (occ) set = 1;
  if (POD > 8) {
    state[1] ^= (-set ^ state[1]) & (1 << (POD - 9));
  } else {
    state[2] ^= (-set ^ state[2]) & (1 << (POD - 1));
  }
}

bool occupied(uint8_t pod_num) {
  if (pod_num > 8) {
    return state[1] & (0x01 << (pod_num - 9));
  }
  return state[2] & (0x01 << (pod_num - 1));
}

void all_occupied_test() {
  Serial.println("All occupied test");
  reset_state();

  Serial.println("Expected: 0");
  Serial.print("Actual: ");
  Serial.println(all_occupied()); // expected: 0
  change_state(0b00001001);
  change_state(0b00100001);
  change_state(0b00010001);
  change_state(0b00011001);
  change_state(0b00101001);
  change_state(0b00110001);
  Serial.println("Expected: 0");
  Serial.print("Actual: ");
  Serial.println(all_occupied()); // expected: 0
  change_state(0b00111001);
  change_state(0b01000001);
  change_state(0b01001001);
  change_state(0b01010001);
  Serial.println("Expected: 1");
  Serial.print("Actual: ");
  Serial.println(all_occupied()); // expected: 1
}

bool all_occupied() {
  for (int i = 1; i < 11; i++) {
    if (!occupied(i)) return false;
  }
  return true;
}

void is_ready_test() {
  Serial.println("Is ready test");
  reset_state();

  Serial.println("Expected: 0");
  Serial.print("Actual: ");
  Serial.println(is_ready(1));
  state[1] = 4;
  Serial.println("Expected: 1");
  Serial.print("Actual: ");
  Serial.println(is_ready(1));

  POD = 8;
  Serial.println("Expected: 0");
  Serial.print("Actual: ");
  Serial.println(is_ready(8));
  state[0] = 2;
  Serial.println("Expected: 1");
  Serial.print("Actual: ");
  Serial.println(is_ready(8));
}

void set_ready() {
  if (POD > 6) {
    state[0] |= (0x01 << (POD - 7));
  } else {
    state[1] |= (0x01 << (POD + 1));
  }
}

bool is_ready(uint8_t pod_num) {  // returns true if pod_num pod's "ready" state is 1
  if (pod_num > 6) {
    return state[0] & (0x01 << (pod_num - 7));
  }
  return state[1] & (0x01 << (pod_num + 1));
}

void all_ready_test() {
  Serial.println("All ready test");
  reset_state();

  Serial.println("Expected: 0");
  Serial.print("Actual: ");
  Serial.println(all_ready());

  state[1] = 252;
  Serial.println("Expected: 0");
  Serial.print("Actual: ");
  Serial.println(all_ready());

  state[0] = 15;
  Serial.println("Expected: 1");
  Serial.print("Actual: ");
  Serial.println(all_ready());
}

bool all_ready() {  // returns true if all pods' "ready" state is 1. Only used by master to send the "go" signal for all_occupied
  for (int i = 1; i < 11; i++) {
    if (!is_ready(i)) return false;
  }
  return true;
}

void reset_ready(uint8_t pod_num) {  // sets the pod_num pod "ready" state to 0
  if (pod_num > 6) {
    state[0] &= ~(0x01 << (pod_num - 7));
  } else {
    state[1] &= ~(0x01 << (pod_num + 1));
  }
}

void reset_ready_all() {  // sets all pods' "ready" state to 0
  for (size_t i = 1; i < 11; i++) {
    reset_ready(i);
  }
}

uint8_t* get_test_array(uint8_t loop_num) {
  uint8_t *ptr;
  switch (loop_num) {
    case 0: ptr = first[0];
    case 1: ptr = second[0];
    case 2: ptr = third[0];
    case 3: ptr = fourth[0];
    case 4: ptr = fifth[0];
    case 5: ptr = sixth[0];
    case 6: ptr = seventh[0];
    case 7: ptr = eighth[0];
    case 8: ptr = ninth[0];
    case 9: ptr = tenth[0];
  }
  return ptr;
}

void print_state() {
  for (size_t i = 0; i < 3; i++) {
    Serial.print(state[i]);
    Serial.print(' ');
  }
  Serial.println();
}

void reset_state() {
  POD = 1;
  state[0] = 0; temp_state[0] = 0;
  state[1] = 0; temp_state[1] = 0;
  state[2] = 0; temp_state[2] = 0;
}

void print_expected_actual_state(uint8_t *temp_state) {
  print_expected_actual(temp_state[0], state[0]);
  print_expected_actual(temp_state[1], state[1]);
  print_expected_actual(temp_state[2], state[2]);
}

